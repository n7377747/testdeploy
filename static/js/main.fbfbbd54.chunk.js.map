{"version":3,"sources":["shared/baseUrl.js","redux/ActionCreators.js","redux/ActionTypes.js","components/LoadingComponent.js","components/CommentsComponent.js","components/MainComponent.js","redux/comments.js","App.js","redux/ConfigureStore.js","serviceWorker.js","index.js"],"names":["baseUrl","commentsFailed","errmess","type","payload","addComments","comments","Loading","className","required","val","length","validEmail","test","validName","len1","len2","len","maxLength","CommentComponent","props","state","isCommentFormOpen","RenderComments","bind","toggleComment","handleComment","this","setState","values","postComment","list","map","comment","in","key","id","message","author","Intl","DateTimeFormat","year","month","day","format","Date","parse","date","Card","inverse","style","backgroundColor","borderColor","CardHeader","tag","CardBody","padding","Button","onClick","isLoading","errMess","Modal","isOpen","toggle","ModalHeader","ModalBody","onSubmit","Row","Label","htmlFor","md","Col","text","model","name","placeholder","validators","show","messages","textarea","rows","size","offset","color","Component","Main","fetchComments","commentsLoading","commentsErrMess","connect","dispatch","newComment","Object","assign","toISOString","fetch","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","json","addComment","catch","console","log","alert","Comments","action","concat","store","createStore","combineReducers","applyMiddleware","thunk","logger","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fbfbbd54.chunk.js","sourcesContent":["export const baseUrl=\"https://manojdb.herokuapp.com/\";","import * as ActionTypes from './ActionTypes';\r\nimport {baseUrl} from '../shared/baseUrl';\r\n\r\nexport const addComment=(comment)=>({\r\n\ttype:ActionTypes.ADD_COMMENT,\r\n\tpayload:comment\t\r\n});\r\n\r\n\r\nexport const postComment=(comment)=>(dispatch)=>{\r\n\tconst newComment=Object.assign({date:new Date().toISOString()},comment);\r\n\treturn fetch(baseUrl+'comments',{\r\n\t\tmethod:'POST',\r\n\t\tbody:JSON.stringify(newComment),\r\n\t\theaders:{\r\n\t\t\t'Content-Type':'application/json'\r\n\t\t},\r\n\t\tcredentials:'same-origin'\r\n\t})\r\n\t.then(response=>{\r\n\t\tif(response.ok) return response;\r\n\t\telse {\r\n\t\t\tvar error=new Error('Error '+response.status+': '+response.statusText);\r\n\t\t\terror.response=response;\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t},\r\n\terror=>{\r\n\t\tvar errmess=new Error(error.message);\r\n\t\tthrow errmess;\r\n\t})\r\n\t.then(response=>response.json())\r\n\t.then(response=>dispatch(addComment(response)))\r\n\t.catch(error=>{console.log('Post comments',error.message);\r\nalert(\"Your comment could not be updated\\n Error:\"+error.message);});\r\n\t\r\n}\r\n\r\n\r\nexport const fetchComments=()=>(dispatch)=>{\r\n\treturn fetch(baseUrl+'comments')\r\n\t.then(response=>{\r\n\t\tif(response.ok)return response;\r\n\t\telse {\r\n\t\t\tvar error=new Error('Error '+response.status+': '+response.statusText);\r\n\t\t\terror.response=response;\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t},\r\n\terror=>{\r\n\t\tvar errmess=new Error(error.message);\r\n\t\tthrow errmess;\r\n\t})\r\n\t.then(response=>response.json())\r\n\t.then(comments=>dispatch(addComments(comments)))\r\n\t.catch(error=>dispatch(commentsFailed(error.message)));\r\n}\r\n\r\n\r\nexport const commentsLoading=()=>({\r\n\ttype:ActionTypes.COMMENTS_LOADING\r\n\r\n});\r\n\r\nexport const commentsFailed=(errmess)=>({\r\n\ttype:ActionTypes.COMMENTS_FAILED,\r\n\tpayload:errmess\r\n});\r\n\r\nexport const addComments=(comments)=>({\r\n\ttype:ActionTypes.ADD_COMMENTS,\r\n\tpayload:comments\r\n});\r\n\r\n","export const ADD_COMMENT=\"ADD_COMMENT\";\r\nexport const COMMENTS_LOADING='COMMENTS_LOADING';\r\nexport const ADD_COMMENTS='ADD_COMMENTS';\r\nexport const COMMENTS_FAILED='COMMENTS_FAILED';","import React from 'react';\r\nexport const Loading=()=>{\r\n\treturn (\r\n\t\t<div className=\"col-12\">\r\n\t\t\t<span className=\"fa fa-spinner fa-pulse fa-3x fa-fw text-primary\"></span>\r\n\t\t\t<p>Loading . . .</p>\r\n\r\n\t\t</div>);\r\n}","import React, { Component } from 'react';\r\n\r\nimport { Control, LocalForm, Errors, action } from 'react-redux-form';\r\nimport {Fade, Stagger } from 'react-animation-components';\r\nimport {Loading } from './LoadingComponent'\r\nimport {\r\n    Card,\r\n    CardImg,\r\n    CardText,\r\n    CardBody,\r\n    CardTitle,\r\n    CardHeader,\r\n    Modal,\r\n    ModalHeader,\r\n    Label,\r\n    ModalBody,\r\n    Button,\r\n    Row,\r\n    Col\r\n} from 'reactstrap';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\nconst validName = (len1, len2) => (val) => minLength(len1)(val) && maxLength(len2)(val);\r\n\r\nclass CommentComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isCommentFormOpen: false\r\n        }\r\n        this.RenderComments = this.RenderComments.bind(this);\r\n        this.toggleComment = this.toggleComment.bind(this);\r\n        this.handleComment = this.handleComment.bind(this);\r\n    }\r\n    \r\n    toggleComment() {\r\n        this.setState({\r\n            isCommentFormOpen: !this.state.isCommentFormOpen\r\n        });\r\n    }\r\n    handleComment(values) {\r\n        this.toggleComment();\r\n        this.props.postComment(values);\r\n        //addComment(this.props.dish.id,values.rating,values.author,values.message)\r\n        //event.preventDefault();//by default control goes to next page\r\n    }\r\n    RenderComments({ comments }) {\r\n        const list = comments.map((comment) => {\r\n            return (\r\n                <Fade in>\r\n\t\t\t        <li key={comment.id}>\r\n\t\t\t            <p className=\"row\">{comment.message}</p>\r\n\t\t\t            <p>-- {comment.author} {\"   \"}{new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'}).format(new Date(Date.parse(comment.date)))}</p>\r\n\t\t\t        </li>\r\n\t\t\t    </Fade>\r\n            );\r\n        });\r\n        return (\r\n            <Card inverse style={{backgroundColor:\"#333\",borderColor:\"#300\"}}>\r\n            <CardHeader tag=\"h3\" >\r\n\t\t                    Comments\r\n            </CardHeader>\r\n\t\t        <CardBody>\r\n\t\t            <div className=\"container\" style={{padding:\"0px 35px 35px 35px\"}}>\r\n\t\t                \r\n\t                    <ul className=\"list-unstyled\">\r\n\t                        <Stagger in>\r\n\t                            {list}\r\n\t                        </Stagger>\r\n\t                    </ul>\r\n\t\t                <div className=\"row\">\r\n\t\t                    <Button  onClick={this.toggleComment}>\r\n\t\t                        <span className=\"fa fa-pencil\"></span>{\" \"}Submit Comment</Button>\r\n\t\t                </div>\r\n\t\t            </div>\r\n\t\t        </CardBody>\r\n\t\t    </Card>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if (this.props.isLoading) {\r\n            return (\r\n                <div className='container'>\r\n\t\t\t        <div className=\"row\">\r\n\t\t\t            <Loading />\r\n\t\t\t        </div>\r\n\t\t\t    </div>\r\n            );\r\n        } else if (this.props.errMess) {\r\n            return (\r\n                <div className='container'>\r\n\t\t\t        <div className=\"row\">\r\n\t\t\t            <h4>{this.props.errMess}</h4>\r\n\t\t\t        </div>\r\n\t\t\t    </div>\r\n            );\r\n        } else if (this.props.comments != null) {\r\n            return (\r\n                <div className=\"container\">\r\n\t\t\t        <div className=\"row \">\r\n\t\t\t            <div className=\"col-12 col-md-9 offset-md-3 m-1\" >\r\n\t\t\t                {this.RenderComments({comments:this.props.comments})}\r\n\t\t\t            </div>\r\n\t\t\t        </div>\r\n\t\t\t        <Modal isOpen={this.state.isCommentFormOpen} toggle={this.toggleComment}>\r\n\t\t\t            <ModalHeader toggle={this.toggleComment}>\r\n\t\t\t                Submit Comment\r\n\t\t\t            </ModalHeader>\r\n\t\t\t            <ModalBody>\r\n\t\t\t                <LocalForm onSubmit={(values)=>this.handleComment(values)}>\r\n\t\t\t                    <Row className=\"form-group\">\r\n\t\t\t                        <Label htmlFor=\"author\" md={2}>Name</Label>\r\n\t\t\t                        <Col md={10}>\r\n\t\t\t                        <Control.text className=\"form-control\" model=\".author\" id=\"author\" name=\"author\" placeholder=\"Name\" validators={{required,validName:validName(3,15)}} />\r\n\t\t\t                        <Errors className=\"alert-danger text-center\" model=\".author\" show=\"touched\" messages={{\r\n\t\t\t\t\t\t\t\t\t\t\trequired:\" required ! .. \",\r\n\t\t\t\t\t\t\t\t\t\t\tvalidName:\" Please enter a valid name(3-20 characters) \"\r\n\t\t\t\t\t\t\t\t\t\t}} />\r\n\t\t\t                        </Col>\r\n\t\t\t                    </Row>\r\n\t\t\t                    <Row className=\"form-group\">\r\n\t\t\t                        <Label htmlFor=\"email\" md={2}>Email</Label>\r\n\t\t\t                        <Col md={10}>\r\n\t\t\t                        <Control.text className=\"form-control\" model=\".email\" id=\"email\" name=\"email\" placeholder=\"Email ID\" validators={{required,validEmail}} />\r\n\t\t\t                        <Errors className=\"alert-danger text-center\" model=\".email\" show=\"touched\" messages={{\r\n\t\t\t\t\t\t\t\t\t\t\trequired:\"required ! ..\",\r\n\t\t\t\t\t\t\t\t\t\t\tvalidEmail:\" Please enter a valid email \"\r\n\t\t\t\t\t\t\t\t\t\t}} />\r\n\t\t\t                        </Col>\r\n\t\t\t                    </Row>\r\n\t\t\t                    <Row className=\"form-group\">\r\n\t\t\t                        <Label htmlFor=\"message\" md={2}>Comment</Label>\r\n\t\t\t                        <Col md={10}>\r\n\t\t\t                        <Control.textarea className=\"form-control\" model=\".message\" id=\"message\" name=\"message\" placeholder=\"Tell us about your opinion\" rows={12} validators={{validName:validName(2,500)}} />\r\n\t\t\t                        <Errors className=\"alert-danger text-center\" model=\".message\" show=\"touched\" messages={{\r\n\t\t\t\t\t\t\t\t\t\t\trequired:\" required ! .. \",\r\n\t\t\t\t\t\t\t\t\t\t\tvalidName:\" Write something before you submit \"\r\n\t\t\t\t\t\t\t\t\t\t}} />\r\n\t\t\t                        </Col>\r\n\t\t\t                    </Row>\r\n\t\t\t                    <Row className=\"form-group\">\r\n\t\t\t                        <Col md={{size:10,offset:2}}>\r\n\t\t\t                        <Button type=\"submit\" color=\"primary\">\r\n\t\t\t                            <span className=\"fa fa-pencil \"> </span>\r\n\t\t\t                            {\" \"}Submit feedback\r\n\t\t\t                        </Button>\r\n\t\t\t                        </Col>\r\n\t\t\t                    </Row>\r\n\t\t\t                </LocalForm>\r\n\t\t\t            </ModalBody>\r\n\t\t\t        </Modal>\r\n\t\t\t    </div>\r\n\r\n\t\t\t);\r\n        }\r\n    }\r\n}\r\nexport default CommentComponent;","import React, { Component } from 'react';\r\nimport {actions} from \"react-redux-form\";\r\nimport {connect } from 'react-redux';\r\nimport {postComment,fetchComments} from '../redux/ActionCreators';\r\nimport {TransitionGroup,CSSTransition} from 'react-transition-group';\r\nimport CommentComponent from './CommentsComponent';\r\n\r\nconst mapStateToProps=(state)=>{\r\n    return {\r\n      comments:state.comments\r\n    }\r\n  }\r\n\r\n\r\nconst mapDispatchToProps=(dispatch)=>({\r\n  postComment:(comment)=>dispatch(postComment(comment)),\r\n  fetchComments:()=>{dispatch(fetchComments())}\r\n  \r\n})\r\n\r\n\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n}\r\n\r\ncomponentDidMount(){\r\n  this.props.fetchComments();\r\n}\r\n\r\nrender(){\r\n\t\r\n\treturn (\r\n\t\t<div>\r\n\t\t<h4>helo</h4>\r\n\t\t\t<CommentComponent\r\n\t\t\tcommentsLoading={this.props.comments.isLoading}\r\n\t\t\tcommentsErrMess={this.props.comments.errMess}\r\n\t\t\tcomments={this.props.comments.comments}\r\n\t\t\tpostComment={this.props.postComment}\r\n\t\t\t />\r\n\t\t</div>\r\n\t\t);\r\n\r\n}\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Main);","import * as ActionTypes from './ActionTypes';\r\n\r\nexport const Comments=(state={\r\nisLoading:true,\r\nerrMess:null,\r\ncomments:[]\r\n},action)=>{\r\n\tswitch(action.type){\r\n\t\tcase ActionTypes.ADD_COMMENTS:\r\n\t\t\treturn {...state,isLoading:false,errMess:null,comments:action.payload}\r\n\t\tcase ActionTypes.COMMENTS_LOADING:\r\n\t\t\treturn {...state,isLoading:true,errMess:null,comments:[]}\r\n\t\tcase ActionTypes.COMMENTS_FAILED:\r\n\t\t\treturn {...state,isLoading:false,errMess:action.payload,comments:[]}\r\n\t\tcase ActionTypes.ADD_COMMENT:\r\n\t\t\tvar comment=action.payload;\r\n\t\t\treturn {...state,comments:state.comments.concat(comment)};\r\n\t\t\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Main from './components/MainComponent';\n\nimport {Provider} from 'react-redux';\nimport {ConfigureStore} from './redux/ConfigureStore';\n\nconst store=ConfigureStore();\n\n\nfunction App() {\n  return (\n   <Provider store={store}>\n      <div className=\"App\">\n        <Main />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import {createStore,combineReducers,applyMiddleware} from 'redux';\r\nimport  thunk from 'redux-thunk';\r\nimport logger from 'redux-logger'\r\nimport {createForms} from 'react-redux-form';\r\nimport {Comments} from './comments'\r\nexport const ConfigureStore=()=>{\r\n\tconst store=createStore(\r\n\t\tcombineReducers({\r\n\t\t\tcomments:Comments\r\n\t\t\t\r\n\r\n\t\t})\r\n\t\t,applyMiddleware(thunk,logger)\r\n\t\t);\r\n\treturn store;\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}